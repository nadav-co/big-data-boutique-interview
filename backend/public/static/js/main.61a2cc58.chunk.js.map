{"version":3,"sources":["cmps/Header.tsx","services/httpService.js","services/managerService.ts","cmps/ManagerEdit.tsx","store/actions/managerActions.ts","services/utils.ts","pages/manager.tsx","services/meetingService.ts","store/actions/meetingActions.ts","cmps/MeetingEdit.tsx","cmps/MeetingPreview.tsx","cmps/MeetingList.tsx","pages/Room.tsx","App.tsx","serviceWorkerRegistration.js","store/reducers/managerReducer.ts","store/reducers/meetingReducer.ts","store/reducers/index.ts","store/store.ts","reportWebVitals.js","index.js"],"names":["Header","className","to","BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","res","console","dir","managerService","query","addManager","updateManager","managers","log","manager","_id","newManager","ManagerEdit","name","saveManager","fullname","useState","setFullname","dispatch","useDispatch","onSubmit","ev","managerToAdd","managerToUpdate","preventDefault","type","value","onChange","target","placeholder","onClick","utils","makeId","length","txt","possible","i","charAt","Math","floor","random","Manager","useSelector","state","managerModule","map","meetingService","getMeetingById","getEmptyMeeting","startDate","Date","endDate","createdBy","desc","occupationHours","updateMeeting","addMeeting","getOccupations","date","meetings","id","meeting","newMeeting","occupations","getMeetings","MeetingEdit","meetingModule","meetingToEdit","occupationsByDate","setMeeting","selfOccupation","setSelfOccupation","msg","setMsg","useEffect","setEmptyMeeting","occHours","Array","getHours","fill","idx","emptyMeeting","isWorkHours","hour","diff","isOccHours","time","includes","getMonth","getDate","handleFormChange","JSON","parse","saveDate","dateToSave","toLocaleString","month","toLocaleDateString","onSetMsg","setTimeout","getMilliseconds","err","onInput","stringify","selected","peekNextMonth","showMonthDropdown","showYearDropdown","showTimeSelect","timeIntervals","filterTime","dateNow","dateFormat","scrollableYearDropdown","includeDates","dropdownMode","MeetingPreview","split","startTime","end","MeetingList","filteredMeetings","setFIlteredMeetings","setDate","dateParams","filterMeetings","onSetDate","newDate","filtered","filter","m","sort","b","yearDropdownItemNumber","toDateString","Room","isOccupied","setIsOccupied","hourInterval","startHour","minInterval","setInterval","checkOccupation","MIN","clearInterval","now","App","path","component","from","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61a2cc58.chunk.js","sourcesContent":["import { NavLink } from \"react-router-dom\";\n\nexport function Header() {\n    return (\n        <header className=\"flex align-center space-bt\">\n            <div className=\"logo\"></div>\n            <ul className=\"flex\">\n                <li><NavLink to=\"/room\">Rooms</NavLink></li>\n                <li><NavLink to=\"/manager\">Managers</NavLink></li>\n            </ul>\n        </header>\n    )\n}","import Axios from 'axios'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        (process.env.NODE_ENV !== 'production') && console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${JSON.stringify(data)}`)\r\n        console.dir(err)\r\n        throw err\r\n    }\r\n}","import { Manager } from \"../interfaces/entities\";\nimport { httpService } from \"./httpService\";\n\nexport const managerService = {\n    query,\n    addManager,\n    updateManager\n}\n\n\nasync function query(): Promise<Manager[]> {\n    try {\n        const managers = await httpService.get('manager')\n        return managers\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}\n\nasync function updateManager(manager: Manager) {\n    try {\n        const newManager = await httpService.put(`manager/${manager._id}`, manager)\n        return newManager\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}\nasync function addManager(manager: Manager) {\n    try {\n        const newManager = await httpService.post('manager', manager)\n        return newManager\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}","import { useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { addManager, updateManager } from \"../store/actions/managerActions\"\n\nexport function ManagerEdit({ manager, saveManager }: any) {\n\n    const name = manager.fullname\n    const [fullname, setFullname] = useState(name)\n    const dispatch = useDispatch()\n\n    const onSaveManager = (ev: any) => {\n        ev.preventDefault()\n        dispatch(manager._id ? updateManager({ ...manager, fullname }) : addManager({ ...manager, fullname }))\n    }\n    return (\n        <section className=\"manager-edit\">\n            <form onSubmit={onSaveManager}>\n                <input type=\"text\" value={fullname} onChange={({ target }) => setFullname(target.value)} placeholder=\"Add Manager\" />\n\n                {(fullname !== name) && <div className=\"buttons flex\">\n                    <button className=\"cancel nice-btn\" type=\"button\" onClick={() => setFullname(name)}>cancel</button>\n                    <button className=\"nice-btn\">Save</button>\n                </div>}\n            </form>\n        </section>\n    )\n}","import { Manager } from \"../../interfaces/entities\"\nimport { managerService } from \"../../services/managerService\"\n\nexport function getManagers() {\n  return async (dispatch: any) => {\n    try {\n      const managers = await managerService.query()\n      dispatch({ type: 'SET_MANAGERS', managers })\n      return managers\n    }\n    catch (err) {\n      console.log('err in getManagers', err)\n    }\n  }\n}\nexport function addManager(managerToAdd: Manager) {\n  return async (dispatch: any) => {\n    try {\n      const manager = await managerService.addManager(managerToAdd)\n      dispatch({ type: 'ADD_MANAGER', manager })\n      return manager\n    }\n    catch (err) {\n      console.log('err in getManagers', err)\n    }\n  }\n}\nexport function updateManager(managerToUpdate: Manager) {\n  return async (dispatch: any) => {\n    try {\n      const manager = await managerService.updateManager(managerToUpdate)\n      dispatch({ type: 'UPDATE_MANAGER', manager })\n      return manager\n    }\n    catch (err) {\n      console.log('err in getManagers', err)\n    }\n  }\n}\n","\r\nexport const utils = {\r\n    makeId\r\n}\r\n\r\nfunction makeId(length = 10) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}","import { useSelector } from \"react-redux\"\nimport { ManagerEdit } from \"../cmps/ManagerEdit\"\nimport { RootState } from \"../interfaces/state\"\nimport { utils } from \"../services/utils\"\n\n\nexport function Manager() {\n    const { managers } = useSelector((state: RootState) => state.managerModule)\n\n    return (\n        <main className=\"manager-page\">\n            <h1>managers</h1>\n            <section className=\"managers-container flex col center\">\n\n                {managers.map(manager => (\n                    <ManagerEdit key={utils.makeId()} manager={manager} />\n                ))}\n                <ManagerEdit key={utils.makeId()} manager={{ fullname: '' }} />\n            </section>\n        </main>\n    )\n}","import { Meeting } from '../interfaces/entities'\nimport { httpService } from './httpService';\nexport const meetingService = {\n    query,\n    getMeetingById,\n    getEmptyMeeting,\n    updateMeeting,\n    addMeeting,\n    getOccupations\n}\n\nasync function query(date: string): Promise<Meeting[]> {\n    try {\n        const meetings = await httpService.get(`meeting/${date}`)\n        return meetings\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}\nasync function getMeetingById(id: string): Promise<Meeting> {\n    try {\n        const meeting = await httpService.get(`meeting/${id}`)\n        return meeting\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}\n\nfunction getEmptyMeeting(): Meeting {\n    return {\n        startDate: new Date(),\n        endDate: null,\n        createdBy: '',\n        desc: '',\n        occupationHours: [],\n    }\n}\n\nasync function updateMeeting(meeting: Meeting) {\n    try {\n        const newMeeting = await httpService.put(`meeting/${meeting._id}`, meeting)\n        return newMeeting\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}\nasync function addMeeting(meeting: Meeting) {\n    try {\n        const newMeeting = await httpService.post('meeting', meeting)\n        return newMeeting\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}\n\nasync function getOccupations(date: string) {\n    try {\n        const occupations = await httpService.get(`meeting/occupation/${date}`)\n        return occupations\n    } catch (err) {\n        console.log(err);\n        throw err\n    }\n}","import { Meeting } from \"../../interfaces/entities\"\nimport { meetingService } from \"../../services/meetingService\"\n\nexport function getMeetings(date: string) {\n  return async (dispatch: any) => {\n    try {\n      const meetings = await meetingService.query(date)\n      dispatch({ type: 'SET_MEETINGS', meetings })\n      return meetings\n    }\n    catch (err) {\n      console.log('err in getMeetings', err)\n    }\n  }\n}\n\nexport function setMeetingToEdit(id: string) {\n  return async (dispatch: any) => {\n    try {\n      const meetingToEdit = await meetingService.getMeetingById(id) //no need if we have sockets\n      dispatch({ type: 'SET_MEETING_TO_EDIT', meetingToEdit })\n      return meetingToEdit\n    }\n    catch (err) {\n      console.log('err in getMeetingById', err)\n    }\n  }\n}\n\nexport function saveMeeting(newMeeting: Meeting) {\n  return async (dispatch: any) => {\n    try {\n      if (newMeeting._id) {\n        var meeting = await meetingService.updateMeeting(newMeeting)\n        dispatch({ type: 'UPDATE_MEETING', meeting })\n      } else {\n        meeting = await meetingService.addMeeting(newMeeting)\n        dispatch({ type: 'ADD_MEETING', meeting })\n      }\n      const occupations = await meetingService.getOccupations(new Date(meeting.startDate).toLocaleDateString())\n\n      dispatch({ type: 'SET_OCCUPATIONS', occupations })\n      return meeting\n    }\n    catch (err) {\n      console.log('err in updateMeeting', err)\n      throw err\n    }\n  }\n}\n\nexport function getOccupations(date: string) {\n  return async (dispatch: any) => {\n    try {\n      const occupations = await meetingService.getOccupations(date)\n      dispatch({ type: 'SET_OCCUPATIONS', occupations })\n      return occupations\n    }\n    catch (err) {\n      console.log('err in getMeetingById', err)\n    }\n  }\n}","import { Manager } from \"../interfaces/entities\"\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { utils } from \"../services/utils\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../interfaces/state\";\nimport { useEffect, useState } from \"react\";\nimport { meetingService } from \"../services/meetingService\";\nimport { getOccupations, saveMeeting } from \"../store/actions/meetingActions\";\n\nexport function MeetingEdit() {\n\n    const dispatch = useDispatch()\n\n    const { meetingToEdit, occupationsByDate } = useSelector((state: RootState) => state.meetingModule)\n    const { managers } = useSelector((state: RootState) => state.managerModule)\n    const [meeting, setMeeting] = useState(null)\n    const [selfOccupation, setSelfOccupation] = useState([])\n    const [msg, setMsg] = useState('')\n\n    \n    useEffect(() => {\n        setEmptyMeeting()\n    }, [managers])\n    \n    useEffect(() => {\n        if (meetingToEdit) {\n            const startDate = new Date(meetingToEdit.startDate)\n            const endDate = (meetingToEdit.endDate) ? new Date(meetingToEdit.endDate) : null\n            setMeeting({ ...meetingToEdit, startDate, endDate })\n            if (meetingToEdit._id) {\n                const occHours = new Array(endDate.getHours() - startDate.getHours()).fill('').map((a, idx) => startDate.getHours() + idx)\n                setSelfOccupation(occHours)\n            } else setSelfOccupation([])\n        }\n    }, [meetingToEdit])\n    \n    const setEmptyMeeting = () => {\n        const emptyMeeting = { ...meetingService.getEmptyMeeting(), createdBy: managers[0] }\n        dispatch({ type: 'SET_MEETING_TO_EDIT', meetingToEdit: { ...emptyMeeting } })\n    }\n\n    const filterStartHours = (time: Date) => {\n        const hour = time.getHours()\n        const dateNow = new Date()\n        if (dateNow.toLocaleDateString() === time.toLocaleDateString()) {\n            if (hour < dateNow.getHours()) return false\n        }\n        return (isWorkHours(hour, 1)) && isOccHours(time, hour)\n\n    }\n\n    const filterEndHours = (time: Date) => {\n        const hour = time.getHours()\n        if (hour <= meeting.startDate.getHours()) return false\n        return (isWorkHours(hour)) && isOccHours(time, hour, 1)\n    }\n\n    const isWorkHours = (hour: number, diff: number = 0) => {\n        return (hour < 9 || hour > (18 - diff)) ? false : true\n    }\n\n    const isOccHours = (time: Date, hour: number, diff: number = 0) => {\n        if (selfOccupation.includes(hour - diff)) return true\n        return (occupationsByDate[`${time.getMonth()}-${time.getDate()}`]?.includes(hour - diff)) ? false : true\n    }\n\n    const handleFormChange = ({ target }: any) => {\n        var { name, value, type } = target\n        if (type === 'select-one') value = JSON.parse(value)\n        setMeeting({ ...meeting, [name]: value })\n    }\n\n    const saveDate = (dateToSave: Date | [Date, Date], name: string) => {\n        const date = new Date(dateToSave.toLocaleString())\n        if (date.getMonth() !== +occupationsByDate.month) {\n            dispatch(getOccupations(date.toLocaleDateString()))\n        }\n        setMeeting({ ...meeting, [name]: date })\n    }\n\n    const onSaveMeeting = (ev: any) => {\n        ev.preventDefault()\n        const { startDate, endDate } = meeting\n        if (!startDate || !endDate || startDate.getMilliseconds()) {\n            onSetMsg('Please choose start and end dates.')\n            return\n        }\n        try {\n            dispatch(saveMeeting({ ...meeting }))\n            setEmptyMeeting()\n        } catch (err) {\n            onSetMsg('Can not save. Please try again')\n        }\n    }\n\n    const onSetMsg = (msg: string) => {\n        setMsg(msg)\n        setTimeout(setMsg, 3000, '')\n    }\n\n\n    if (!meeting?.startDate || !managers) return <h1>Loading</h1>\n    return (\n        <section className=\"meeting-edit\">\n            <h3>{msg}</h3>\n            <form className=\"flex col\" onSubmit={onSaveMeeting}>\n                <label>\n                    Manager:\n                    <br />\n                    <select name=\"createdBy\" onInput={handleFormChange} value={JSON.stringify(meeting.createdBy)}>\n                        {managers.map((manager: Manager) => <option key={utils.makeId()} value={JSON.stringify(manager)}>{manager.fullname}</option>)}\n                    </select>\n                </label>\n                <label>\n                    Start:\n                    <br />\n                    <DatePicker\n                        selected={new Date(meeting.startDate)}\n                        peekNextMonth\n                        showMonthDropdown\n                        showYearDropdown\n                        showTimeSelect\n                        timeIntervals={60}\n                        filterTime={filterStartHours}\n                        dateFormat=\"MMMM d, yyyy h aa\"\n                        scrollableYearDropdown\n                        onChange={date => saveDate(date, 'startDate')}\n                    />\n                </label>\n                <label>\n                    End:\n                    <br />\n                    <DatePicker\n                        selected={new Date(meeting.endDate || meeting.startDate)}\n                        includeDates={[new Date(meeting.startDate)]}\n                        showTimeSelect\n                        timeIntervals={60}\n                        filterTime={filterEndHours}\n                        dateFormat=\"h aa\"\n                        dropdownMode=\"select\"\n                        onChange={date => saveDate(date, 'endDate')}\n                    />\n                </label>\n                <label>\n                    Description:\n                    <br />\n                    <textarea name=\"desc\" onChange={handleFormChange} value={meeting.desc} placeholder=\"Enter Meeting Description\"></textarea>\n                </label>\n                <div className=\"buttons flex space-bt\">\n                    <button type=\"button\" className={`cancel nice-btn ${meeting._id ? '' : 'hidden'}`} onClick={setEmptyMeeting}>Cancel</button>\n                    <button className=\"nice-btn\" type=\"submit\">Save Meeting</button>\n                </div>\n            </form>\n\n        </section>\n    )\n}","export function MeetingPreview({ meeting }: any) {\n\n    const [date, start] = new Date(meeting.startDate).toLocaleString().split(', ')\n    const startTime = start.split('.')[0]\n\n    const end = new Date(meeting.endDate).toLocaleString().split(', ')[1]\n\n    return (\n        <div className=\"meeting-preview flex align-center\">\n            <span className=\"name\">{meeting.createdBy.fullname}</span>\n            <span className=\"date\">{date}</span>\n            <span className=\"time\">{startTime} - {end}</span>\n            <p className=\"desc\">{meeting.desc || '(No description)'}</p>\n        </div>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Meeting } from \"../interfaces/entities\";\nimport { utils } from \"../services/utils\";\nimport { MeetingPreview } from \"./MeetingPreview\";\nimport { getMeetings, setMeetingToEdit } from \"../store/actions/meetingActions\";\nimport { RootState } from \"../interfaces/state\";\nimport DatePicker from \"react-datepicker\";\n\nexport function MeetingList() {\n\n    const { meetings } = useSelector((state: RootState) => state.meetingModule)\n    const [filteredMeetings, setFIlteredMeetings] = useState([])\n    const [date, setDate] = useState(null)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        setDate(new Date())\n    }, [])\n\n    useEffect(() => {\n        const dateParams = new Date().toLocaleString().split(',')[0]\n        dispatch(getMeetings(dateParams))\n    }, [dispatch])\n\n    useEffect(() => {\n        date && filterMeetings()\n    }, [date, meetings])\n\n    const onSetDate = (newDate: any) => {\n        if (date.getMonth() !== newDate.getMonth()) {\n            const dateParams = newDate.toLocaleString().split(',')[0]\n            dispatch(getMeetings(dateParams))\n        }\n        setDate(newDate)\n    }\n\n    const filterMeetings = () => {\n        const filtered = meetings?.filter(m => (new Date(m.startDate).getDate() === date.getDate()))\n        setFIlteredMeetings(filtered.sort((a, b) => new Date(a.startDate).getHours() - new Date(b.startDate).getHours()))\n    }\n\n    return (\n        <main className=\"meeting-list flex col\">\n            <h1>meetings</h1>\n            <DatePicker\n                selected={date}\n                peekNextMonth\n                showMonthDropdown\n                showYearDropdown\n                yearDropdownItemNumber={20}\n                timeIntervals={60}\n                dateFormat=\"MMMM d, yyyy\"\n                scrollableYearDropdown\n                dropdownMode=\"select\"\n                onChange={date => onSetDate(date)}\n            />\n            <div className=\"title flex align-center\">\n                <h3 className=\"name\">Manager</h3>\n                <h3 className=\"date\">Date</h3>\n                <h3 className=\"time\">Time</h3>\n                <h3 className=\"desc\">Description</h3>\n            </div>\n            {(filteredMeetings?.length) ?\n                <section className=\"meetings-container\">\n                    {filteredMeetings.map((meeting: Meeting) => (\n                        <div key={utils.makeId()} onClick={() => dispatch(setMeetingToEdit(meeting._id))}>\n                            <MeetingPreview meeting={meeting} />\n                        </div>\n                    ))}\n                </section> :\n                <h2>(No Meetings On {date?.toDateString()})</h2>}\n        </main>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { MeetingEdit } from \"../cmps/MeetingEdit\"\nimport { MeetingList } from \"../cmps/MeetingList\"\nimport { RootState } from \"../interfaces/state\"\n\n\nexport function Room() {\n    const { occupationsByDate } = useSelector((state: RootState) => state.meetingModule)\n    const [isOccupied, setIsOccupied] = useState(false)\n\n    useEffect(() => {\n        const MIN = 1000 * 60\n        const HOUR = MIN * 60\n        const start = new Date()\n        const startHour = start.getHours()\n        var hourInterval: any\n        const minInterval = setInterval(() => {\n            if (new Date().getHours() !== startHour) {\n                hourInterval = setInterval(checkOccupation, HOUR)\n                clearInterval(minInterval)\n            }\n        }, MIN)\n        return () => {\n            clearInterval(minInterval)\n            clearInterval(hourInterval)\n        }\n    }, [])\n    useEffect(() => {\n        checkOccupation()\n    }, [occupationsByDate])\n\n    const checkOccupation = () => {\n        const now = new Date()\n        const date = `${now.getMonth()}-${now.getDate()}`\n        if (occupationsByDate[date]?.includes(now.getHours())) setIsOccupied(true)\n        else if (isOccupied) setIsOccupied(false)\n    }\n\n    return (\n        <section className=\"room-details\">\n            <h1 className=\"room-occupation\">Room 1 is {isOccupied ? 'currently occupied 🔴' : 'available 🟢'}</h1>\n            <MeetingList />\n            <MeetingEdit />\n        </section>\n    )\n}\n\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport { Header } from './cmps/Header'\nimport { Manager } from './pages/manager'\nimport { Room } from './pages/Room'\nimport { getManagers } from './store/actions/managerActions'\nimport { getOccupations } from './store/actions/meetingActions'\n\n\nexport function App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getManagers())\n    dispatch(getOccupations(new Date().toLocaleDateString()))\n  }, [dispatch])\n\n  return (\n    <div className=\"app\">\n      <Router>\n        <Header />\n        <main>\n          <Switch>\n            <Route path=\"/manager\" component={Manager} />\n            <Route path=\"/room\" component={Room} />\n            <Redirect from=\"/\" to=\"/room\" />\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Manager } from \"../../interfaces/entities\"\n\nexport interface ManagerState {\n    managers: Manager[]\n}\nconst initialState: ManagerState = {\n    managers: [],\n}\n\nexport function ManagerReducer(state = initialState, action: any = {}) {\n    switch (action.type) {\n        case 'SET_MANAGERS':\n            return { ...state, managers: action.managers }\n        case 'ADD_MANAGER':\n            return { ...state, managers: [...state.managers, action.manager] }\n        case 'UPDATE_MANAGER':\n            let managers = state.managers.map(manager => (manager._id === action.manager._id) ? action.manager : manager)\n            return { ...state, managers }\n        default:\n            return state\n    }\n}\n","import { Meeting } from \"../../interfaces/entities\"\r\nimport { MeetingModule } from \"../../interfaces/state\"\r\n\r\n\r\nconst initialState: MeetingModule = {\r\n  meetings: [],\r\n  meetingToEdit: null,\r\n  occupationsByDate: {}\r\n}\r\n\r\nexport function meetingReducer(state = initialState, action: any = {}) {\r\n  switch (action.type) {\r\n    case 'SET_MEETING_TO_EDIT':\r\n      return { ...state, meetingToEdit: action.meetingToEdit }\r\n    case 'SET_MEETINGS':\r\n      return { ...state, meetings: action.meetings }\r\n    case 'ADD_MEETING':\r\n      return { ...state, meetings: [...state.meetings, action.meeting] }\r\n    case 'UPDATE_MEETING':\r\n      let meetings = state.meetings.map(meeting => (meeting._id === action.meeting._id) ? action.meeting : meeting)\r\n      return { ...state, meetings }\r\n    case 'SET_OCCUPATIONS':\r\n      return { ...state, occupationsByDate: action.occupations }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { ManagerReducer } from './managerReducer'\r\nimport { meetingReducer } from './meetingReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  meetingModule: meetingReducer,\r\n  managerModule: ManagerReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport { rootReducer } from './reducers'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n)\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './assets/styles/main.scss'\nimport { store } from './store/store'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}